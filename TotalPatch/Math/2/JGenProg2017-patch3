--- /Users/liangjingjing/WorkSpace/Data/Defects4J/projects/Math/Math_2_buggy//src/main/java//org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2019-03-12 19:32:15.000000000 +0800
+++ /Users/liangjingjing/WorkSpace/Data/Defects4J/projects/Math/Math_2_buggy//src/main/java//org/apache/commons/math3/distribution/AbstractIntegerDistribution.java.patched	2019-03-12 19:32:15.000000000 +0800
@@ -39,17 +39,8 @@
         final double mu = getNumericalMean();
         final double sigma = org.apache.commons.math3.util.FastMath.sqrt(getNumericalVariance());
         final boolean chebyshevApplies = !(((((java.lang.Double.isInfinite(mu)) || (java.lang.Double.isNaN(mu))) || (java.lang.Double.isInfinite(sigma))) || (java.lang.Double.isNaN(sigma))) || (sigma == 0.0));
-        if (chebyshevApplies) {
-            double k = org.apache.commons.math3.util.FastMath.sqrt(((1.0 - p) / p));
-            double tmp = mu - (k * sigma);
-            if (tmp > lower) {
-                lower = ((int) (java.lang.Math.ceil(tmp))) - 1;
-            }
-            k = 1.0 / k;
-            tmp = mu + (k * sigma);
-            if (tmp < upper) {
-                upper = ((int) (java.lang.Math.ceil(tmp))) - 1;
-            }
+        if (p == 1.0) {
+            return upper;
         }
         return solveInverseCumulativeProbability(p, lower, upper);
     }
